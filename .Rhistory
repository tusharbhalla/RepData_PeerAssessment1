find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
x <- 1
print(x)
x
x <- 5
x
x
print(x)
x <- 1,5
x <- 1:35
x
x <- c(0.5,0.6)
x
x <- c(1+0i)
x
y <- c(1.7,"a")
y
y <- c(TRUE,2)
y
x <- 0:6
class(x)
y <- as.numeric(x)
y
x
z <- as.logical(x)
z
z <- as.character(x)
z
a <- as.numeric(z)
a
x <- c("a","b")
z <- as.numeric(x)
as.logical(x)
as.complex(x)
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6 nrow = 2, ncol = 3)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- 1:10
dim(m) <- c(2,5)
m
x <- 1:3
y <- 5:8
cbind(x, y)
rbind(x, y)
x <- list(1, "a" TRUE)
x <- list(1, "a", TRUE)
x
dim(x)
name(x)
clear
x <- factor(c("yes","no","yes"))
x
table(x)
unclass(x)
x <- factor(c("yes","no","yes"), levels = c("yes","no"))
x
is.na(x)
is.na(y)
dat <- data.frame(test = 1:4)
dat
dat
x <- c("a","b","C","d","a")
x[1]
x[2]
x[1:4]
x[x>"a"]
u <- x> "a"
u
x[u]
x <- matrix(1:6,2,3)
x[1,2]
x[2,1]
x[1,]
x
x[,2]
x[1,2,drop = FALSE]
x[1,,drop = FALSE]
x <- list(foo = 1:4, bar = 0.6)
x
x[1]
x[[1]
x[[1]]
x$bar
x[["bar"]]
x["bar"]
x[c(1,3)]
x[c(1,2)]
name <- "foo"
x[[name]]
x$name
x <- list(a = list(10,12,14), b=c(3.14,2.81))
x[[c(1,3)]]
xx
x
x <- list(aardvark =1:5)
x
x$a
x[["a}"]]
x[["a"]]
x[["a", exact = FALSE]]
x <- c(1,2,NA,4,NA,5)
x
bad <- is.na(x)
x[!bad]
x[!bad]
x[X != NA]
x[X ! NA]
x[X =! NA]
x
x[=! NA]
x
airquality[1:6,]
airquality[1:25,]
good <- complete.cases(airquality)
airquality[good, ][1:6,]
airquality[good, ][1:6,]
airquality[good, ][1:25,]
?read.table
str(read.table)
str(read.csv)
str(file)
str(url)
file <- url("http://www.galleriashows.com")
file
file <- url("http://www.galleriashows.com","r")
x <- readlines(file)
x <- readLines(file)
head)x_
head(x)
x
x <- c(1,2,3)
y <- c(4,5,6)
cbind(x,y)
x <- 1:4
y <- 2
x + y
x <- c(3, 5, 1, 10, 12, 6)
x[x == 0] <- 6
x
x[x >= 6] <- 0
x
x[x <= 5] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x <= 5] <- 0
x
read.table(C:\Users\tbhalla\Documents\Coursera\R Programming\rprog-data-quiz1_data\hw1_data.txt)
hw1_data <- read.csv("~/Coursera/R Programming/rprog-data-quiz1_data/hw1_data.csv")
View(hw1_data)
hw1_data[1:2]
hw1_data[2,6]
hw1_data[,6]
hw1_data[1,47]
hw1_data[47,1]
hw1_data[1,]
hw1_data[2,]
hw1_data[1:2,]
hw1_data[,153-2:153]
hw1_data[,1]
is.NA(hw1_data[,1])
is.na(hw1_data[,1])
?count
is.na(hw1_data[,1])=TRUE
x <- is.na(hw1_data[,1])=TRUE
x
is.na(hw1_data[,1])=TRUE
is.na(hw1_data[,1])
hw1_data
hw1_data <- read.csv("~/Coursera/R Programming/rprog-data-quiz1_data/hw1_data.csv")
View(hw1_data)
is.na(hw1_data[,1])
colSUms(is.na(hw1_data[,1]))
colSUms(is.na(hw1_data[,1]) = TRUE)
is.na(hw1_data[,1])
mean(hw1_data[,1])
hw1_data[bad,][,1]
hw1_data[good,][,1]
mean(hw1_data[good,][,1])
goog <- complete.cases(hw1_data[,1])
goog
hw1_data[goog,][,1]
?complete.cases
incomplete.cases
?incomplete.cases
??incomplete.cases
hw1_data[goog,][,1]
x <- 153 - 116
x
ozone <- hw1_data[,1]
ozone
hw1_data[,1]
hw1_data[,1]
hw1_data[,1(x>1)]
hw1_data[hw1_data[,1]>31][,1]
hw1_data[hw1_data[,1]>31,][,1]
hw1_data[hw1_data[,1]>31,][,]
hw1_data <- read.csv("~/Coursera/R Programming/rprog-data-quiz1_data/hw1_data.csv")
View(hw1_data)
hw1_data[hw1_data[,1]>31,][,]
hw1_data
hw1_data[hw1_data[,1]>31,]
hw1_data
hw1_data["Ozone">31]
hw1_data[hw1_data["Ozone"]>31]
hw1_data(hw1_data["Ozone"]>31)
subset(hw1_data, Ozone>31)
subset(hw1_data, Ozone>31, Temp>90)
subset(hw1_data, Ozone>31)
subset(hw1_data, Ozone>31, Temp>90)
subset(hw1_data, Ozone>31, Temp>90)[]
subset(hw1_data, Ozone>31)
subset(subset(hw1_data, Ozone>31),Solar>90)
subset(subset(hw1_data, Ozone>31),Temp>90)
val <- subset(subset(hw1_data, Ozone>31),Temp>90)
mean(val[,2])
mon <- subset(hw1_data, Month=6)
mon
mon
mon <- subset(hw1_data, Month==6)
mon
mean(mon[,4])
hw1_data
x <- 1:4
y <- 2:3
x+y
hw1_data <- read.csv("~/Coursera/R Programming/rprog-data-quiz1_data(1)/hw1_data.csv")
View(hw1_data)
hw1_data[2,]
hw1_data[1:2,]
hw1_data[,151:153]
hw1_data[151:153,]
hw1_data[47,1]
hw1_data[,1]
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2
x+y
hw1_data[2,]
hw1_data[1:2,]
hw1_data[,152:153]
hw1_data[152:153,]
hw1_data[47,1]
find.package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth )
setwd("./Coursera/Reproducible Research/Week 2/Assignment")
?bunzip2
??bunzip2
library(R.utils)
install.packages("R.utils")
library(R.utils)
?bunzip2
?download.file
download.file(fileUrl, destfile = "repdata_data_StormData.csv.bz2")
fileUrl = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, destfile = "repdata_data_StormData.csv.bz2")
?bunzip2
str(bunzip2)
bunzip("repdata_data_StormData.csv.bz2", "repdata_data_StormData.csv")
bunzip2("repdata_data_StormData.csv.bz2", "repdata_data_StormData.csv")
ls
getwd()
setwd("./Coursera/Reproducible Research/Week 3/Assignment")
fileUrl = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destFileBZ2 = "repdata_data_StormData.csv.bz2"
destFileCSV = "repdata_data_StormData.csv"
download.file(fileUrl, destfile = destFileBZ2)
bunzip2(destFileBZ2, destFileCSV)
setwd("./Coursera/Reproducible Research/Week 3/Assignment")
getwd()
setwd("./R")
setwd("~/Coursera/Reproducible Research/Week 3/Assignment")
setwd("~/Coursera/Reproducible Research/Week 3/Assignment")
fileUrl = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
destFileBZ2 = "repdata_data_StormData.csv.bz2"
destFileCSV = "repdata_data_StormData.csv"
download.file(fileUrl, destfile = destFileBZ2)
bunzip2(destFileBZ2, destFileCSV, overwrite = TRUE)
stormData <- fread(destFileCSV)
require(data.table)
stormData <- fread(destFileCSV)
stormData <- read.csv(destFileCSV)
head(stormData)
stormDataTable <- data.table(stormData)
summary(stormDataTable)
eventFatalities <- stormDataTable[,mean(FATALITIES), by = EVTYPE]
head(eventFatalities)
?sort
?order
order(eventFatalities)
maxFatalities <- eventFatalities[,max(V1)]
maxFatalities
head(eventFatalities)
evType <- eventFatalities[V1 == maxFatalities,]
eventFatalities[V1 == maxFatalities,]
evType
eventFatalities[EVTYPE == "TORNADOES",]
eventFatalities[EVTYPE == "TORNADOES, TSTM WIND, HAIL",]
eventFatalities[,max(V1)]
eventFatalities[,.SD[which.max(V1)], by = EVTYPE][]
eventFatalities[which.max(V1)][]
summary(stormDataTable)
eventFatalities[,order(V1)]
eventFatalities[which.max(V1)][]
eventFatalities[order(V1)][]
eventFatalities[order(-V1)][]
eventFatalities[order(-V1)][10,]
eventFatalities[order(-V1)][]
head(eventFatalities)
head(eventFatalities[order(-V1)][])
top10FatalityEvents <- head((eventFatalities[order(-V1)][]),10)
top10FatalityEvents
eventFatalities <- stormDataTable[,sum(FATALITIES), by = EVTYPE]
eventFatalities[order(-V1)][]
top10FatalityEvents <- head((eventFatalities[order(-V1)][]),10)
top10FatalityEvents
summary(stormDataTable)
?barplot
eventFatalities <- stormDataTable[,sum(FATALITIES), by = EVTYPE]
eventFatalities[order(-V1)][]
sumFatalitiesTop10 <- head((eventFatalities[order(-V1)][]),10)
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE)
par(mar = c(12,4,4,2))
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE, )
par(mar = c(12,4,4,2) + 0.1)
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE, )
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by EVent Type")
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by EVent Type")
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
xlab = "Event Type", ylab = "Total Fatalities")
par(mar)
par
par()
par%mar
par$mar
par()$mar
par(mar = c(5.1,4.1,4.1,2.1))
par()$mar
par(mar = c(10.1,4.1,4.1,2.1))
par()$mar
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
xlab = "Event Type", ylab = "Total Fatalities")
par(mar = c(10.1,4,4,2))
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
xlab = "Event Type", ylab = "Total Fatalities")
par(mar = c(2,4,4,2))
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
xlab = "Event Type", ylab = "Total Fatalities")
par(mar = c(12,4,4,2))
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
xlab = "Event Type", ylab = "Total Fatalities", las = 1)
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
xlab = "Event Type", ylab = "Total Fatalities", las = 3)
sumFatalitiesTop15 <- head((eventFatalities[order(-V1)][]),15)
par(mar = c(12,12,2,2) + 0.1)
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
ylab = "Total Fatalities", las = 3)
par(mar = c(12,4,2,2) + 0.1)
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
ylab = "Total Fatalities", las = 3)
sumFatalities <- stormDataTable[,sum(FATALITIES), by = EVTYPE]
barplot(head(sumFatalities$V1,10), names.arg = head(sumFatalities$EVTYPE,10),
main = "Total Fatalities by Event Type",
ylab = "Total Fatalities", las = 3)
eventFatalities <- stormDataTable[,sum(FATALITIES), by = EVTYPE]
sumFatalitiesTop15 <- head((eventFatalities[order(-V1)][]),15)
barplot(sumFatalitiesTop10$V1, names.arg = sumFatalitiesTop10$EVTYPE,
main = "Total Fatalities by Event Type",
ylab = "Total Fatalities", las = 3)
setwd("~/Coursera/Reproducible Research/Week 2/Assignment/RepData_PeerAssessment1")
library(data.table)
fileName = "activity.zip"
unzip(fileName)
activity <- fread("./activity.csv")
